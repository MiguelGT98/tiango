Description: Template para la aplicación web Tiango.

Parameters:
  EnvironmentName:
    Description: Un nombre del entorno para poner como prefijo a los recursos.
    Type: String
    Default: tiango

  VpcCIDR:
    Description: Por favor ingresa el rango de la IP (CIDR notation) para la VPC.
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Por favor ingresa el rango de la IP (CIDR notation) para la subnet pública en la primera zona de disponibilidad.
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Por favor ingresa el rango de la IP (CIDR notation) para la subnet pública en la segunda zona de disponibilidad.
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: Por favor ingresa el rango de la IP (CIDR notation) para la subnet privada en la primera zona de disponibilidad.
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: Por favor ingresa el rango de la IP (CIDR notation) para la subnet privada en la segunda zona de disponibilidad.
    Type: String
    Default: 10.0.3.0/24

  HostingBucketName:
    Description: Nombre de la bucket para hostear un sitio web estático.
    Type: String
    Default: tiango-hosting-bucket

  HostingIndexDocument:
    Description: Ruta de inicio para un sitio web estático.
    Type: String
    Default: index.html

  BucketName:
    Description: Nombre de la bucket para hostear un sitio web estático.
    Type: String
    Default: tiango-file-bucket

Resources:
  # Definición de VPC y subnets. También se integra la internet gateway.

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1a"
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  # Tabla de ruteo pública.

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Ruta ipv4 para PublicSubnet1

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Ruta ipv4 para PublicSubnet2

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  #NACL para la VPC hanilitando HTTP/HTTPS inbound y outbound, inbound SSH

  Nacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NACL

  InboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  InboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  OutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  OutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 201
      Protocol: 6
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  InboundSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 102
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  InboundElse:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 105
      Protocol: -1
      RuleAction: deny
      Egress: "false"
      CidrBlock: 0.0.0.0/0
  
  OutboundElse:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 202
      Protocol: -1
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0

  # Asociar las subnets públicas con la NACL creada

  NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref Nacl

  NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref Nacl

  # VPC endpoints para permitir el tráfico desde nuestra VPC hacia el internet y viceversa

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref PublicRouteTable
      PolicyDocument:
        Id: HostingPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref HostingBucketName, /*]]

  # Security Groups para HTTP, HTTPS, SSH y RDS

  default:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguridad default 
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Default SG
      VpcId: !Ref VPC

  SecurityGroupIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: "default"
    Properties: 
      CidrIp: 0.0.0.0/0
      FromPort: 443
      GroupId: !Ref default
      IpProtocol: tcp
      ToPort: 443

  SecurityGroupIngressHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: "default"
    Properties: 
      CidrIp: 0.0.0.0/0
      FromPort: 80
      GroupId: !Ref default
      IpProtocol: tcp
      ToPort: 80

  SecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: "default"
    Properties: 
      CidrIp: 0.0.0.0/0
      FromPort: 22
      GroupId: !Ref default
      IpProtocol: tcp
      ToPort: 22
  
  rds:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acceso a RDS
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} RDS Acces Security Group

  #S3 Bucket para hostear un sitio estático con permisos públicos de lectura por default

  HostingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref HostingBucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: !Ref HostingIndexDocument
        ErrorDocument: !Ref HostingIndexDocument
        RoutingRules:
        - RoutingRuleCondition:
            HttpErrorCodeReturnedEquals: '404'
            KeyPrefixEquals: /
          RedirectRule: 
            HostName: !Sub ${HostingBucketName}.us-east-1.amazonaws.com
            ReplaceKeyPrefixWith: report-404/
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Hosting Bucket

  #S3 Bucket para almacenar archivos

  FileBucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketName: !Ref BucketName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} File Bucket

  # Bucket Policy para permitir a los usuarios acceder a nuestra Bucket de Hosting.

  HostingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref HostingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref HostingBucketName, /*]]

  # Bucket Policy para conceder permisos de lectura a nuestra Bucket de Archivos.

  FileBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FileBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref BucketName, /*]]

Outputs:
  VPC:
    Description: Una referencia a la VPC creada.
    Value: !Ref VPC

  PublicSubnets:
    Description: Las subnets públicas.
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PrivateSubnets:
    Description: Las subnets privadas.
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]

  PublicSubnet1:
    Description: Una referencia a la subnet pública en la 1er zona de disponibilidad.
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Una referencia a la subnet pública en la 2da zona de disponibilidad.
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: Una referencia a la subnet privada en la 1er zona de disponibilidad.
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Una referencia a la subnet privada en la 2da zona de disponibilidad.
    Value: !Ref PrivateSubnet2
